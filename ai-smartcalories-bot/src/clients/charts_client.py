"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è
"""
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import pandas as pd
from datetime import date, datetime, timedelta
from typing import List, Dict, Optional
import io
import os
from clients.supabase_client import supabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 12
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

def get_weight_data(user_id: int, days: int = 30) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    try:
        start_date = date.today() - timedelta(days=days)
        res = supabase.table("Nutrition Bot").select("date, weight") \
            .eq("user_id", str(user_id)) \
            .gte("date", str(start_date)) \
            .not_.is_("weight", "null") \
            .order("date", desc=False) \
            .execute()
        return res.data if res.data else []
    except Exception as e:
        print(f"‚ùå Failed to get weight data: {e}")
        return []

def get_nutrition_data(user_id: int, days: int = 7) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    try:
        start_date = date.today() - timedelta(days=days)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        daily_data = []
        for i in range(days + 1):
            current_date = start_date + timedelta(days=i)
            
            # –°—É–º–º–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
            res = supabase.table("meals").select("calories, protein, fat, carbs") \
                .eq("user_id", str(user_id)) \
                .eq("date", str(current_date)) \
                .execute()
            
            if res.data:
                total = {"calories": 0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
                for meal in res.data:
                    total["calories"] += meal.get("calories", 0)
                    total["protein"] += meal.get("protein", 0)
                    total["fat"] += meal.get("fat", 0)
                    total["carbs"] += meal.get("carbs", 0)
                
                total["date"] = str(current_date)
                daily_data.append(total)
            else:
                daily_data.append({
                    "date": str(current_date),
                    "calories": 0,
                    "protein": 0,
                    "fat": 0,
                    "carbs": 0
                })
        
        return daily_data
    except Exception as e:
        print(f"‚ùå Failed to get nutrition data: {e}")
        return []

def get_steps_data(user_id: int, days: int = 7) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    try:
        start_date = date.today() - timedelta(days=days)
        res = supabase.table("Nutrition Bot").select("date, steps") \
            .eq("user_id", str(user_id)) \
            .gte("date", str(start_date)) \
            .order("date", desc=False) \
            .execute()
        return res.data if res.data else []
    except Exception as e:
        print(f"‚ùå Failed to get steps data: {e}")
        return []

def create_weight_chart(user_id: int, days: int = 30) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞"""
    try:
        data = get_weight_data(user_id, days)
        if len(data) < 2:
            return None
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date')
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –≤–µ—Å–∞
        ax.plot(df['date'], df['weight'], 
                marker='o', linewidth=2.5, markersize=6,
                color='#2E86AB', label='–í–µ—Å')
        
        # –¢—Ä–µ–Ω–¥
        z = np.polyfit(range(len(df)), df['weight'], 1)
        p = np.poly1d(z)
        ax.plot(df['date'], p(range(len(df))), 
                linestyle='--', alpha=0.7, color='#A23B72', label='–¢—Ä–µ–Ω–¥')
        
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        ax.set_title(f'üìâ –î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞ –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold', pad=20)
        ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        ax.set_ylabel('–í–µ—Å (–∫–≥)', fontsize=12)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        ax.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, days//7)))
        plt.xticks(rotation=45)
        
        # –°–µ—Ç–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞
        ax.grid(True, alpha=0.3)
        ax.legend(fontsize=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        weight_change = df['weight'].iloc[-1] - df['weight'].iloc[0]
        change_text = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_change:+.1f} –∫–≥"
        ax.text(0.02, 0.98, change_text, transform=ax.transAxes, 
                fontsize=11, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"temp_weight_{user_id}.png"
        plt.savefig(filename, dpi=150, bbox_inches='tight')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"‚ùå Failed to create weight chart: {e}")
        return None

def create_calories_chart(user_id: int, days: int = 7) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        data = get_nutrition_data(user_id, days)
        if not data:
            return None
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from clients.supabase_client import get_user_targets
        targets = get_user_targets(user_id)
        target_calories = targets.get('calories', 2000)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–∞–ª–æ—Ä–∏–π
        bars = ax.bar(df['date'], df['calories'], 
                     color=['#FF6B6B' if cal > target_calories else '#4ECDC4' 
                           for cal in df['calories']],
                     alpha=0.8, edgecolor='white', linewidth=1)
        
        # –õ–∏–Ω–∏—è —Ü–µ–ª–∏
        ax.axhline(y=target_calories, color='#FFD93D', linestyle='--', 
                  linewidth=2, label=f'–¶–µ–ª—å: {target_calories} –∫–∫–∞–ª')
        
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        ax.set_title(f'üî• –ö–∞–ª–æ—Ä–∏–∏ –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold', pad=20)
        ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        ax.set_ylabel('–ö–∞–ª–æ—Ä–∏–∏', fontsize=12)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.xticks(rotation=45)
        
        # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
        for bar, cal in zip(bars, df['calories']):
            if cal > 0:
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 20,
                       f'{int(cal)}', ha='center', va='bottom', fontsize=9)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_calories = df['calories'].mean()
        stats_text = f"–°—Ä–µ–¥–Ω–µ–µ: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å"
        ax.text(0.02, 0.98, stats_text, transform=ax.transAxes,
                fontsize=11, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightyellow', alpha=0.8))
        
        ax.grid(True, alpha=0.3)
        ax.legend(fontsize=10)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"temp_calories_{user_id}.png"
        plt.savefig(filename, dpi=150, bbox_inches='tight')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"‚ùå Failed to create calories chart: {e}")
        return None

def create_macros_chart(user_id: int, days: int = 7) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ë–ñ–£"""
    try:
        data = get_nutrition_data(user_id, days)
        if not data:
            return None
        
        # –°—É–º–º–∏—Ä—É–µ–º –ë–ñ–£ –∑–∞ –ø–µ—Ä–∏–æ–¥
        total_protein = sum(d['protein'] for d in data)
        total_fat = sum(d['fat'] for d in data)
        total_carbs = sum(d['carbs'] for d in data)
        
        if total_protein + total_fat + total_carbs == 0:
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–ª–æ—Ä–∏–∏
        protein_cal = total_protein * 4
        fat_cal = total_fat * 9
        carbs_cal = total_carbs * 4
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        labels = ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã']
        sizes = [protein_cal, fat_cal, carbs_cal]
        colors = ['#FF9999', '#66B2FF', '#99FF99']
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        wedges, texts, autotexts = ax1.pie(sizes, labels=labels, colors=colors,
                                          autopct='%1.1f%%', startangle=90,
                                          textprops={'fontsize': 11})
        
        ax1.set_title(f'ü•ó –ë–∞–ª–∞–Ω—Å –ë–ñ–£ –∑–∞ {days} –¥–Ω–µ–π\n(–≤ –∫–∞–ª–æ—Ä–∏—è—Ö)', 
                     fontsize=14, fontweight='bold', pad=20)
        
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
        gram_data = [total_protein, total_fat, total_carbs]
        bars = ax2.bar(labels, gram_data, color=colors, alpha=0.8)
        
        ax2.set_title('–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–≥—Ä–∞–º–º—ã)', fontsize=14, fontweight='bold')
        ax2.set_ylabel('–ì—Ä–∞–º–º—ã', fontsize=12)
        
        # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
        for bar, grams in zip(bars, gram_data):
            ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5,
                    f'{grams:.0f}–≥', ha='center', va='bottom', fontsize=10)
        
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"temp_macros_{user_id}.png"
        plt.savefig(filename, dpi=150, bbox_inches='tight')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"‚ùå Failed to create macros chart: {e}")
        return None

def create_activity_chart(user_id: int, days: int = 7) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—à–∞–≥–∏ + –∫–∞–ª–æ—Ä–∏–∏)"""
    try:
        steps_data = get_steps_data(user_id, days)
        if not steps_data:
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame(steps_data)
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date')
        df['steps'] = df['steps'].fillna(0)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
        from clients.supabase_client import get_user_profile
        profile = get_user_profile(user_id)
        weight = profile['weight'] if profile else 70
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –æ—Ç —à–∞–≥–æ–≤
        df['calories_from_steps'] = df['steps'] * weight * 0.00035
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig, ax1 = plt.subplots(figsize=(12, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ —à–∞–≥–æ–≤
        color1 = '#1f77b4'
        ax1.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        ax1.set_ylabel('–®–∞–≥–∏', color=color1, fontsize=12)
        bars1 = ax1.bar(df['date'], df['steps'], alpha=0.7, color=color1, label='–®–∞–≥–∏')
        ax1.tick_params(axis='y', labelcolor=color1)
        
        # –í—Ç–æ—Ä–∞—è –æ—Å—å –¥–ª—è –∫–∞–ª–æ—Ä–∏–π
        ax2 = ax1.twinx()
        color2 = '#ff7f0e'
        ax2.set_ylabel('–ö–∞–ª–æ—Ä–∏–∏ –æ—Ç —à–∞–≥–æ–≤', color=color2, fontsize=12)
        line2 = ax2.plot(df['date'], df['calories_from_steps'], 
                        color=color2, marker='o', linewidth=2, label='–ö–∞–ª–æ—Ä–∏–∏')
        ax2.tick_params(axis='y', labelcolor=color2)
        
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        ax1.set_title(f'üë£ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold', pad=20)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.xticks(rotation=45)
        
        # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö —à–∞–≥–æ–≤
        for bar, steps in zip(bars1, df['steps']):
            if steps > 0:
                ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 100,
                        f'{int(steps):,}', ha='center', va='bottom', fontsize=9)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_steps = df['steps'].mean()
        total_calories = df['calories_from_steps'].sum()
        stats_text = f"–°—Ä–µ–¥–Ω–µ–µ: {avg_steps:.0f} —à–∞–≥–æ–≤/–¥–µ–Ω—å\n–í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ: {total_calories:.0f} –∫–∫–∞–ª"
        ax1.text(0.02, 0.98, stats_text, transform=ax1.transAxes,
                fontsize=11, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightgreen', alpha=0.8))
        
        ax1.grid(True, alpha=0.3)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"temp_activity_{user_id}.png"
        plt.savefig(filename, dpi=150, bbox_inches='tight')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"‚ùå Failed to create activity chart: {e}")
        return None

def cleanup_temp_files(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    temp_files = [
        f"temp_weight_{user_id}.png",
        f"temp_calories_{user_id}.png", 
        f"temp_macros_{user_id}.png",
        f"temp_activity_{user_id}.png"
    ]
    
    for filename in temp_files:
        try:
            if os.path.exists(filename):
                os.remove(filename)
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to delete temp file {filename}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç
import numpy as np