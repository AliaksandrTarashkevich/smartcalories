# ‚úÖ supabase_client.py ‚Äî helper layer for Supabase üíæ
"""
–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ ppitanieal.py:
‚Ä¢ user_exists, save_user_data, get_user_profile
‚Ä¢ get_user_targets  ‚Äì —Ä–∞—Å—á—ë—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –ø–æ LBM
‚Ä¢ save_weight / save_steps  (+steps_exist_for_date, get_steps_for_date)
‚Ä¢ save_meal  ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–ª–æ—Ä–∏–∏/–ë–ñ–£ –±–ª—é–¥–∞
‚Ä¢ get_nutrition_for_date ‚Äì —Å—É–º–º–∏—Ä—É–µ—Ç –µ–¥—É –∑–∞ –¥–∞—Ç—É
‚Ä¢ save_burned_calories / get_burned_calories ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç/–ø–æ–ª—É—á–∞–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü (–º–∏–Ω–∏–º—É–º):
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ users ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ meals ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ id (uuid, PK, default uuid)           ‚îÇ   ‚îÇ id (uuid, PK)                 ‚îÇ
‚îÇ user_id  text UNIQUE                  ‚îÇ   ‚îÇ user_id text                  ‚îÇ
‚îÇ weight   numeric                      ‚îÇ   ‚îÇ date date                     ‚îÇ
‚îÇ height   integer                      ‚îÇ   ‚îÇ description text              ‚îÇ
‚îÇ bodyfat  numeric                      ‚îÇ   ‚îÇ calories integer              ‚îÇ
‚îÇ gender   text                         ‚îÇ   ‚îÇ protein numeric               ‚îÇ
‚îÇ created_at timestamp default now()    ‚îÇ   ‚îÇ fat numeric                   ‚îÇ
‚îÇ                                       ‚îÇ   ‚îÇ carbs numeric                 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ burned_calories ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Nutrition Bot ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ id (uuid, PK)                         ‚îÇ   ‚îÇ id | user_id | date           ‚îÇ
‚îÇ user_id text                          ‚îÇ   ‚îÇ    | weight numeric           ‚îÇ
‚îÇ date date                             ‚îÇ   ‚îÇ    | steps integer            ‚îÇ
‚îÇ calories integer                      ‚îÇ   ‚îÇ                               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""
import os
from datetime import date
from supabase import create_client, Client
from dotenv import load_dotenv
from postgrest.exceptions import APIError
import base64
from pathlib import Path

load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

print("üîç DEBUG: Checking Supabase configuration")
print(f"URL configured: {'Yes' if SUPABASE_URL else 'No'}")
print(f"ANON_KEY configured: {'Yes' if SUPABASE_ANON_KEY else 'No'}")
print(f"SERVICE_ROLE_KEY configured: {'Yes' if SUPABASE_SERVICE_ROLE_KEY else 'No'}")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
supabase_admin: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
try:
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    tables = supabase.table("users").select("count").limit(1).execute()
    print("‚úÖ Supabase connection successful")
except Exception as e:
    print(f"‚ùå Supabase connection error: {e}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –¥–µ—Ñ–∏—Ü–∏—Ç–∞
DEFICIT_MODES = {
    "–õ—ë–≥–∫–∏–π": 0,
    "–°—Ä–µ–¥–Ω–∏–π": 500,
    "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π": 750
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ users helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def user_exists(user_id: int) -> bool:
    res = supabase.table("users").select("id").eq("user_id", str(user_id)).execute()
    return bool(res.data)

def save_user_data(user_id: int, weight: float, height: int, bodyfat: float, gender: str, deficit_mode: str = "–õ—ë–≥–∫–∏–π"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        payload = {
            "user_id": str(user_id),
            "weight": weight,
            "height": height,
            "bodyfat": bodyfat,
            "gender": gender,
            "deficit": DEFICIT_MODES[deficit_mode]
        }
        print(f"üîç DEBUG: Saving user data for {user_id}: {payload}")
        result = supabase.table("users").upsert(payload, on_conflict="user_id").execute()
        print(f"‚úÖ User data saved successfully: {result.data}")
        return True
    except Exception as e:
        print(f"‚ùå Failed to save user data: {e}")
        return False

def set_deficit_mode(user_id: int, mode: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if mode not in DEFICIT_MODES:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞: {mode}")
    
    deficit = DEFICIT_MODES[mode]
    
    try:
        # Verify user exists
        current = supabase.table("users").select("*").eq("user_id", str(user_id)).single().execute()
        if not current.data:
            raise ValueError(f"User {user_id} not found in database")
        
        # Update deficit
        supabase.table("users").update({
            "deficit": deficit
        }).eq("user_id", str(user_id)).execute()
            
    except Exception as e:
        print(f"‚ùå Failed to update deficit: {e}")
        raise

def get_user_profile(user_id: int):
    try:
        res = supabase.table("users").select("weight, height, bodyfat, gender, deficit").eq("user_id", str(user_id)).single().execute()
        return res.data if res.data else None
    except Exception as e:
        print(f"‚ùå Failed to get user profile: {e}")
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ (lean‚Äëmass based) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _calc_targets(weight: float, bodyfat: float, deficit: int = 0):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—Ö–æ–π –º–∞—Å—Å—ã —Ç–µ–ª–∞ –∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞"""
    lean = weight * (1 - bodyfat / 100)
    base_cal = round(lean * 30)
    cal = base_cal - deficit
    protein = round(lean * 2)
    fat = round(lean * 1)
    carbs = max(0, round((cal - protein * 4 - fat * 9) / 4))
    
    return {"calories": cal, "protein": protein, "fat": fat, "carbs": carbs}

def get_user_targets(user_id: int):
    prof = get_user_profile(user_id)
    if not prof:
        return {"calories": 2000, "protein": 100, "fat": 70, "carbs": 200}
    
    deficit = prof.get('deficit', 0)
    if deficit is None:
        deficit = 0
    
    return _calc_targets(prof['weight'], prof['bodyfat'], deficit)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ last weight helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_last_weight(user_id: int, *, exclude_date: date | None = None):
    q = supabase.table("Nutrition Bot").select("weight, date").eq("user_id", str(user_id))
    if exclude_date:
        q = q.neq("date", str(exclude_date))
    res = q.order("date", desc=True).limit(1).execute()
    if res.data:
        return res.data[0].get("weight")
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ weight / steps ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _get_record(user_id: int, d: date):
    res = supabase.table("Nutrition Bot").select("id, weight, steps").eq("user_id", str(user_id)).eq("date", str(d)).execute()
    return res.data[0] if res.data else None

def save_weight(user_id: int, weight: float, *, date: date):
    rec = _get_record(user_id, date)
    if rec:
        supabase.table("Nutrition Bot").update({"weight": weight}).eq("id", rec['id']).execute()
    else:
        supabase.table("Nutrition Bot").insert({"user_id": str(user_id), "date": str(date), "weight": weight}).execute()


def save_steps(user_id: int, steps: int, *, date: date):
    rec = _get_record(user_id, date)
    if rec:
        supabase.table("Nutrition Bot").update({"steps": steps}).eq("id", rec['id']).execute()
    else:
        supabase.table("Nutrition Bot").insert({"user_id": str(user_id), "date": str(date), "steps": steps}).execute()


def get_steps_for_date(user_id: int, d: date):
    rec = _get_record(user_id, d)
    if rec:
        return rec.get("steps")
    return None

def steps_exist_for_date(user_id: int, d: date) -> bool:
    return get_steps_for_date(user_id, d) is not None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Meals / Nutrition ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def save_meal(user_id: int, desc: str, cal: int, prot: float, fat: float, carbs: float):
    supabase.table("meals").insert({
        "user_id": str(user_id),
        "date": str(date.today()),
        "description": desc,
        "calories": cal,
        "protein": prot,
        "fat": fat,
        "carbs": carbs,
    }).execute()


def get_nutrition_for_date(user_id: int, d: date):
    res = supabase.table("meals").select("calories, protein, fat, carbs").eq("user_id", str(user_id)).eq("date", str(d)).execute()
    if not res.data:
        return None
    total = {"calories": 0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
    for r in res.data:
        total["calories"] += r.get("calories") or 0
        total["protein"] += r.get("protein") or 0
        total["fat"]     += r.get("fat") or 0
        total["carbs"]   += r.get("carbs") or 0
    return total

def save_burned_calories(user_id: int, calories: int, date: date) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        res = supabase.table("burned_calories").select("id") \
            .eq("user_id", str(user_id)) \
            .eq("date", str(date)) \
            .execute()
        
        if res.data:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            supabase.table("burned_calories") \
                .update({"calories": calories}) \
                .eq("id", res.data[0]["id"]) \
                .execute()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            supabase.table("burned_calories").insert({
                "user_id": str(user_id),
                "date": str(date),
                "calories": calories
            }).execute()
    except APIError as e:
        print(f"‚ùå Failed to save burned calories: {e}")

def get_burned_calories(user_id: int, date: date) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å"""
    try:
        res = supabase.table("burned_calories").select("calories") \
            .eq("user_id", str(user_id)) \
            .eq("date", str(date)) \
            .execute()
        return res.data[0]["calories"] if res.data else 0
    except APIError as e:
        print(f"‚ùå Failed to get burned calories: {e}")
        return 0

#-------------------------- Delete Meal --------------------------
def get_meals_for_date(user_id: int, d: date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å —Å ID"""
    try:
        print(f"üîç DEBUG: Getting meals for user {user_id} on {d}")
        
        res = supabase.table("meals").select("id, description, calories, protein, fat, carbs, created_at") \
            .eq("user_id", str(user_id)) \
            .eq("date", str(d)) \
            .order("created_at", desc=False) \
            .execute()
            
        print(f"üîç DEBUG: Raw meals data: {res.data}")
        
        if res.data:
            for i, meal in enumerate(res.data):
                print(f"üîç DEBUG: Meal {i+1} - ID: {meal['id']} (type: {type(meal['id'])})")
                print(f"üîç DEBUG: Meal {i+1} - Description: {meal['description']}")
        
        return res.data if res.data else []
    except Exception as e:
        print(f"‚ùå Failed to get meals for date: {e}")
        import traceback
        print(f"‚ùå Full traceback: {traceback.format_exc()}")
        return []

def delete_meal(meal_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º service_role –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS"""
    try:
        print(f"üîç DEBUG: Attempting to delete meal with ID: {meal_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º service_role –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
        delete_result = supabase_admin.table("meals").delete().eq("id", meal_id).execute()
        print(f"üîç DEBUG: Delete result: {delete_result}")
        print(f"üîç DEBUG: Deleted data: {delete_result.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        success = delete_result.data is not None and len(delete_result.data) > 0
        print(f"‚úÖ DELETE SUCCESS: {success}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Failed to delete meal: {e}")
        import traceback
        print(f"‚ùå Full traceback: {traceback.format_exc()}")
        return False

def get_meal_by_id(meal_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–æ ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        res = supabase.table("meals").select("*").eq("id", meal_id).single().execute()
        return res.data if res.data else None
    except Exception as e:
        print(f"‚ùå Failed to get meal by ID: {e}")
        return None
    
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Images Storage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_image_url(file_name: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞"""
    try:
        print(f"üîç DEBUG: Getting signed URL for {file_name}")
        # –ü–æ–ª—É—á–∞–µ–º signed URL —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–µ–π—Å—Ç–≤–∏—è (24 —á–∞—Å–∞)
        signed_url = supabase_admin.storage.from_('nutritionbot').create_signed_url(file_name, 86400)
        print(f"‚úÖ Got signed URL: {signed_url}")
        return signed_url['signedURL']
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to get image URL: {e}")
        print(f"Error details: {str(e)}")
        return None

def init_storage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_url = get_image_url('male-bodyfat.jpg')
        if test_url:
            print("‚úÖ Storage access successful")
        else:
            print("‚ö†Ô∏è Storage access failed")
    except Exception as e:
        print(f"‚ö†Ô∏è Storage access warning: {e}")
        print("‚ÑπÔ∏è Bot will continue working without image support")

def upload_image(file_path: str, file_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ Storage"""
    with open(file_path, 'rb') as f:
        supabase.storage.from_('nutritionbot').upload(file_name, f)

def has_meals_in_timerange(user_id: int, d: date, start_hour: int, end_hour: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        start_time = f"{d}T{start_hour:02d}:00:00"
        end_time = f"{d}T{end_hour:02d}:59:59"
        
        print(f"üîç DEBUG: Checking meals for user {user_id} between {start_time} and {end_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
        res = supabase.table("meals") \
            .select("id") \
            .eq("user_id", str(user_id)) \
            .gte("created_at", start_time) \
            .lte("created_at", end_time) \
            .execute()
        
        has_meals = bool(res.data)
        print(f"‚úÖ Found meals: {has_meals}")
        return has_meals
        
    except Exception as e:
        print(f"‚ùå Error checking meals: {e}")
        return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ–¥—ã –Ω–µ –±—ã–ª–æ
    
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Favorite Meals ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def save_favorite_meal(user_id: int, name: str, description: str, calories: int, protein: float, fat: float, carbs: float) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–ª—é–¥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞
        existing = supabase.table("favorite_meals").select("id") \
            .eq("user_id", str(user_id)) \
            .eq("name", name) \
            .execute()
        
        if existing.data:
            print(f"‚ö†Ô∏è Favorite meal '{name}' already exists for user {user_id}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ
        supabase.table("favorite_meals").insert({
            "user_id": str(user_id),
            "name": name,
            "description": description,
            "calories": calories,
            "protein": protein,
            "fat": fat,
            "carbs": carbs,
            "usage_count": 0
        }).execute()
        
        print(f"‚úÖ Saved favorite meal '{name}' for user {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to save favorite meal: {e}")
        return False

def get_favorite_meals(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –±–ª—é–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        res = supabase.table("favorite_meals").select("*") \
            .eq("user_id", str(user_id)) \
            .order("usage_count", desc=True) \
            .order("name", desc=False) \
            .execute()
        return res.data if res.data else []
    except Exception as e:
        print(f"‚ùå Failed to get favorite meals: {e}")
        return []

def use_favorite_meal(user_id: int, favorite_id: str) -> dict:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–æ
        meal = supabase.table("favorite_meals").select("*") \
            .eq("id", favorite_id) \
            .eq("user_id", str(user_id)) \
            .single().execute()
        
        if not meal.data:
            return None
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        supabase.table("favorite_meals") \
            .update({"usage_count": meal.data["usage_count"] + 1}) \
            .eq("id", favorite_id) \
            .execute()
        
        return meal.data
        
    except Exception as e:
        print(f"‚ùå Failed to use favorite meal: {e}")
        return None

def delete_favorite_meal(user_id: int, favorite_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ"""
    try:
        supabase_admin.table("favorite_meals").delete() \
            .eq("id", favorite_id) \
            .eq("user_id", str(user_id)) \
            .execute()
        return True
    except Exception as e:
        print(f"‚ùå Failed to delete favorite meal: {e}")
        return False

# –í —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞:
__all__ = [
    "save_meal", "save_weight", "save_steps", "get_last_weight",
    "get_nutrition_for_date", "get_steps_for_date", "steps_exist_for_date",
    "user_exists", "save_user_data", "get_user_targets", "get_user_profile",
    "save_burned_calories", "get_burned_calories",
    "get_meals_for_date", "delete_meal", "get_meal_by_id",
    "save_favorite_meal", "get_favorite_meals", "use_favorite_meal", "delete_favorite_meal",  # –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò
    "supabase", "init_storage", "get_image_url", "set_deficit_mode",
    "has_meals_in_timerange"
]
